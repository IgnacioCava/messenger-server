datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "darwin"]
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId @map("user_id")
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  conversations ConversationParticipant[]
  messages      Message[]
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastMessageId String?   @unique @db.ObjectId
  lastMessage   Message?  @relation(name: "lastMessage", fields:[lastMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  messages      Message[]
  users         ConversationParticipant[]
}

model ConversationParticipant {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  userId               String        @db.ObjectId
  user                 User          @relation(fields: [userId], references: [id])
  conversationId       String        @db.ObjectId
  conversation         Conversation  @relation(fields: [conversationId], references: [id])
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  hasSeenLatestMessage Boolean
}

model Message {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  senderId        String        @db.ObjectId
  sender          User          @relation(fields: [senderId], references: [id])
  conversationId  String        @db.ObjectId
  conversation    Conversation  @relation(fields: [conversationId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  lastMessage     Conversation? @relation(name: "lastMessage")
  body            String        
}